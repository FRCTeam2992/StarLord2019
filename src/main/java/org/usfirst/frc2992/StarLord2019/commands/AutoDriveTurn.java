// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2992.StarLord2019.commands;
import edu.wpi.first.wpilibj.command.Command;

import com.ctre.phoenix.motorcontrol.NeutralMode;

import org.usfirst.frc2992.StarLord2019.Robot;
import edu.wpi.first.wpilibj.Timer;

/**
 *
 */
public class AutoDriveTurn extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    private double m_Speed;
    private double m_Heading;
    private double m_TimeOut;
    Timer timer;

 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public AutoDriveTurn(double Heading, double Speed, double TimeOut) {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        m_Speed = Speed;
        m_Heading = Heading;
        m_TimeOut = TimeOut;
        timer = new Timer();

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
        this.setInterruptible(true);

        timer.reset();
        timer.start();

        //RESET ENCODERS
        Robot.driveTrain.rightTalonDrive.setSelectedSensorPosition(0, 0 , 1);
        Robot.driveTrain.leftTalonDrive.setSelectedSensorPosition(0, 0, 1);
    
        //SET HEADING
        Robot.driveTrain.SmartDriveRot(m_Heading);
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
        
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        if (timer.get()>= m_TimeOut || Robot.driveTrain.turnPID.onTarget()){ //ADD IF REACHED SETPOINT
            return true;
        } else{
            return false;
        }
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
        Robot.driveTrain.leftTalonDrive.setNeutralMode(NeutralMode.Coast);
        Robot.driveTrain.rightTalonDrive.setNeutralMode(NeutralMode.Coast);
        Robot.driveTrain.allStop();

    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
        Robot.driveTrain.leftTalonDrive.setNeutralMode(NeutralMode.Coast);
        Robot.driveTrain.rightTalonDrive.setNeutralMode(NeutralMode.Coast);
        Robot.driveTrain.allStop();
    }
}