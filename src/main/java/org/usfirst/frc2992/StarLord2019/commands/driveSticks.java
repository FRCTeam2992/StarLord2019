// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2992.StarLord2019.commands;
import edu.wpi.first.wpilibj.command.Command;

import org.usfirst.frc2992.StarLord2019.Constants;

import org.usfirst.frc2992.StarLord2019.Robot;
import org.usfirst.frc2992.StarLord2019.mhJoystick;

/**
 *
 */
public class driveSticks extends Command {
    boolean limeLightHasTarget = false;

    final double kDamp = 0.2;         // 20% turn speed dampening

    boolean straightDrive = false;          // Are we attempting to assist w/ straight driving?
    final double straightThreshold = 0.1;
    double maxJoy = 0;
    double minJoy = 0;       // Faster than this both stick we straighten assist
    double deadzone = 0;
    double straightHead = 0.0;             // Heading to try and hold
    final double gkp = 0.015;                 // Coefficient for gyro corrections

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public driveSticks() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
        this.setInterruptible(true);//Need this bc Vision Processing needs DT
        Robot.driveTrain.allStop();

        //make sure peak output is definitely +/- 100%
        Robot.driveTrain.rightTalonDrive.configPeakOutputForward(1);
        Robot.driveTrain.rightTalonDrive.configPeakOutputReverse(-1);
        Robot.driveTrain.leftTalonDrive.configPeakOutputForward(1);
        Robot.driveTrain.leftTalonDrive.configPeakOutputReverse(-1);
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
        //double right = -Robot.oi.rightJoy.smoothGetY(); //for tank
        double rightX = -Robot.oi.rightJoy.smoothGetX();//for arcade
        double rightY = -Robot.oi.rightJoy.smoothGetY(); //For tank
        double left = -Robot.oi.leftJoy.smoothGetY();

        // Turn dampening for tank drive
        /*
        double speeddiff = Math.abs(right - left);
        right /= 1 + kDamp * speeddiff;
        left /= 1 + kDamp * speeddiff;
*/
        //turn dampening for arcade
        rightX /= 1 + kDamp;

        // Straight drive assist
/*
        maxJoy = Math.max(Math.abs(rawRight), Math.abs(rawLeft));
        minJoy = Math.min(Math.abs(rawRight), Math.abs(rawLeft));

        deadzone = maxJoy - (maxJoy * .2);

        if (minJoy >= deadzone && ((rawRight > 0 && rawLeft > 0) || (rawRight < 0 && rawLeft < 0))) {
            // Driving straight forward or back
            if (!straightDrive) {
                // First cycle so record the angle
                straightHead = Robot.driveTrain.scaleAngle(Robot.driveTrain.navx.getYaw());
                straightDrive = true;
            } 
            /*else if(rawRight > 0 && rawLeft > 0){
                // Not first cycle so we will adjust drive powers
                right += gkp * Robot.driveTrain.calcGyroError(straightHead);
                left -= gkp * Robot.driveTrain.calcGyroError(straightHead);
            }//
            else {
                // Not first cycle so we will adjust drive powers
                //same values fwd and back
                right += gkp * Robot.driveTrain.calcGyroError(straightHead);
                left -= gkp * Robot.driveTrain.calcGyroError(straightHead);
            }
        } else {
            // Not trying to drive straight
            straightDrive = false;
        }
*/
/*
        else if (stickDiff <  -straightThreshold) {
            // Driving straight back
            if (!straightDrive) {
                // First cycle so record the angle
                straightHead = Robot.driveTrain.scaleAngle(Robot.driveTrain.navx.getYaw());
                straightDrive = true;
            } else {
                // Not first cycle so we will adjust drive powers
                right += gkp * Robot.driveTrain.calcGyroError(straightHead);
                left -= gkp * Robot.driveTrain.calcGyroError(straightHead);
            }
        }   

        // Force scale motor powers -1 to 1 range
        double powerMax = Math.max(1.0, Math.max(Math.abs(right), Math.abs(left)));
        right /= powerMax;
        left /= powerMax;
*/

        if(Robot.oi.slowSpeedRegulator.get()){  //Set to slower max speed for fine movements
            rightX /= Constants.slowSpeed;
            left /= Constants.slowSpeed;
        }

        if(Robot.oi.rightJoy.getTrigger()){
            Robot.driveTrain.highGear();
        } else{
            Robot.driveTrain.lowGear();
        }

        if(Robot.oi.leftJoy.getTrigger()){
            //DO WE WANT TANK OR ARCADE??????
            if (Robot.oi.driveModeBtn.get()) {
                Robot.driveTrain.tankDrive(-rightY, -left);
            } else {
                Robot.driveTrain.arcadeDrive(left, -rightX);
            }
            Robot.isCargoMode = true;

            //setting the port# on the btnBox to boolean for LED
            Robot.oi.buttonBox.setOutput(Robot.oi.cargoLight, true);//turn on CargoLight
            Robot.oi.buttonBox.setOutput(Robot.oi.hatchLight, false);//turn off HatchLight

            Robot.startCam("Cargo"); // start the cargo Camera
            
        } else{
            //DO WE WANT TANK OR ARCADE??????
            if (Robot.oi.driveModeBtn.get()) {
                Robot.driveTrain.tankDrive(left, rightY);
            } else {
                Robot.driveTrain.arcadeDrive(left, -rightX);
            }
                        
            Robot.isCargoMode = false;

            //setting the port# on the btnBox to boolean for LED
            Robot.oi.buttonBox.setOutput(Robot.oi.hatchLight, true);//turn on HatchLight
            Robot.oi.buttonBox.setOutput(Robot.oi.cargoLight, false);//turn off CargoLight

            Robot.startCam("Hatch"); //start HatchCam

            //Setting VP lights
/*            limeLightHasTarget = Robot.getLimelightValidTarget();
            if(limeLightHasTarget && !Robot.isAutoTime){
                Robot.VPLights = true;
                Robot.lightCode.setLightSequence(.225);
            } else{
                Robot.VPLights = false;
            }
*/
        }
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
        Robot.oi.buttonBox.setOutput(Robot.oi.cargoLight, false);//turn off CargoLight
        Robot.oi.buttonBox.setOutput(Robot.oi.hatchLight, false);//turn off HatchLight
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
        Robot.oi.buttonBox.setOutput(Robot.oi.cargoLight, false);//turn off CargoLight
        Robot.oi.buttonBox.setOutput(Robot.oi.hatchLight, false);//turn off HatchLight
    }

}
