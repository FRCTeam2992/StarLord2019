// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2992.StarLord2019.commands;
import edu.wpi.first.wpilibj.command.Command;

import org.usfirst.frc2992.StarLord2019.Robot;
import org.usfirst.frc2992.StarLord2019.mhJoystick;

/**
 *
 */
public class driveSticks extends Command {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public driveSticks() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
        this.setInterruptible(true);//Need this bc Vision Processing needs DT
        Robot.driveTrain.allStop();
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
        double right = Robot.oi.rightJoy.smoothGetY();
        double left = Robot.oi.leftJoy.smoothGetY();

        if(Robot.oi.rightJoy.getTrigger()){
            Robot.driveTrain.highGear();
        } else{
            Robot.driveTrain.lowGear();
        }

        if(Robot.oi.leftJoy.getTrigger()){
            Robot.driveTrain.tankDrive(-right, -left);
            Robot.isCargoMode = true;

            //setting the port# on the btnBox to boolean for LED
            Robot.oi.buttonBox.setOutput(Robot.oi.cargoLight, true);//turn on CargoLight
            Robot.oi.buttonBox.setOutput(Robot.oi.hatchLight, false);//turn off HatchLight

            Robot.startCam("Cargo"); // start the cargo Camera
        } else{
            Robot.driveTrain.tankDrive(left, right);
            Robot.isCargoMode = false;

            //setting the port# on the btnBox to boolean for LED
            Robot.oi.buttonBox.setOutput(Robot.oi.hatchLight, true);//turn on HatchLight
            Robot.oi.buttonBox.setOutput(Robot.oi.cargoLight, false);//turn off CargoLight

            Robot.startCam("Hatch"); //start HatchCam
        }
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
        Robot.oi.buttonBox.setOutput(Robot.oi.cargoLight, false);//turn off CargoLight
        Robot.oi.buttonBox.setOutput(Robot.oi.hatchLight, false);//turn off HatchLight
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
        Robot.oi.buttonBox.setOutput(Robot.oi.cargoLight, false);//turn off CargoLight
        Robot.oi.buttonBox.setOutput(Robot.oi.hatchLight, false);//turn off HatchLight
    }
}
