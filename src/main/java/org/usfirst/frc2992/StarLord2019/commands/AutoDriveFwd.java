// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2992.StarLord2019.commands;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc2992.StarLord2019.Robot;
import edu.wpi.first.wpilibj.Timer;
import com.ctre.phoenix.motorcontrol.NeutralMode;

/**
 *
 */
public class AutoDriveFwd extends Command {
    private double m_Speed;
    private double m_Distance; //must be int bc math in drivetrain has to be int for encoder ticks
    private double m_TimeOut;
    private double m_Heading;
    private boolean m_Gyro;
    private boolean isDoneLeft;  //Are we at our selected position
    private boolean isDoneRight;  //Are we at our selected position

    Timer timer;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public AutoDriveFwd(double Distance, double Speed, double TimeOut, boolean Gyro, double Heading) {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        m_Speed = Speed;
        m_Distance = Distance;
        m_TimeOut = TimeOut;
        m_Heading = Heading; 
        m_Gyro = Gyro;

        timer = new Timer();
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
        this.setInterruptible(true);
        //encoders reset in SmartDriveDist
        timer.reset();
        timer.start();
        //SET DISTANCE
        Robot.driveTrain.SmartDriveDist(m_Distance, m_Speed);
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
        //This determines if the left and right drive motors are on target
        isDoneRight = Math.abs(Robot.driveTrain.convertEncoderTicks(m_Distance) - Robot.driveTrain.rightTalonDrive.getSelectedSensorPosition()) < Robot.driveTrain.convertEncoderTicks(1);
        isDoneLeft = Math.abs(Robot.driveTrain.convertEncoderTicks(m_Distance) - Robot.driveTrain.leftTalonDrive.getSelectedSensorPosition()) < Robot.driveTrain.convertEncoderTicks(1);
        //encoders reset in initialize
       if(m_Gyro) {
           //SET HEADING AND SPEED
           Robot.driveTrain.SmartDriveGyro(m_Heading, m_Speed);
       } 
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        if (m_TimeOut <= timer.get() || (isDoneLeft && isDoneRight)){//Command is finished if over timeout or drive motors are on target
            return true; 
        } else {
            return false;
        }
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
        Robot.driveTrain.leftTalonDrive.setNeutralMode(NeutralMode.Coast);
        Robot.driveTrain.rightTalonDrive.setNeutralMode(NeutralMode.Coast);
        Robot.driveTrain.allStop();
    }


    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
        Robot.driveTrain.leftTalonDrive.setNeutralMode(NeutralMode.Coast);
        Robot.driveTrain.rightTalonDrive.setNeutralMode(NeutralMode.Coast);
        Robot.driveTrain.allStop();
    }
}