// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2992.StarLord2019.commands;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc2992.StarLord2019.Robot;
import edu.wpi.first.wpilibj.Timer;
import org.usfirst.frc2992.StarLord2019.Constants;

/**
 *
 */
public class autoHatchGrab extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    Timer HatchGrabTimer; 
    private int counter = 0;
    private boolean triedToGrab = false;
    private boolean isDone = false;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public autoHatchGrab() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        HatchGrabTimer = new Timer();
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.hatchIntake);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
        //Robot.hatchIntake.HatchIntakeGrab(false);
        HatchGrabTimer.reset();
        this.setInterruptible(true);
        triedToGrab = false;
        counter = 0;
        isDone = false;
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
        if(!triedToGrab){
            if(Robot.hatchIntake.hatchLoadingSwitch.get()){
                counter++;
            }else {
                counter = 0;
            }
            
            if(counter == 5) {
                Robot.hatchIntake.HatchIntakeGrab(false);
                HatchGrabTimer.reset();
                HatchGrabTimer.start();
                triedToGrab = true;
            }
        } else {
            if(HatchGrabTimer.get() >= Constants.hatchLoadingGrabTimeout 
                    && Robot.hatchIntake.hatchLoadingSwitch.get()){
                Robot.hatchIntake.HatchIntakeExtend(false, false);
                isDone = true;
            }else if(HatchGrabTimer.get() >= Constants.hatchLoadingGrabTimeout){
                Robot.hatchIntake.HatchIntakeGrab(true);
                triedToGrab = false;
                counter = 0;
            }
        }
       
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
            return isDone;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
        counter = 0;
        isDone = false;
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
        counter = 0;
        isDone = false;
    }
}
