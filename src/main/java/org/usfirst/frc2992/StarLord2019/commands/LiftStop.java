// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2992.StarLord2019.commands;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc2992.StarLord2019.Robot;
import edu.wpi.first.wpilibj.Timer;

/**
 *
 */
public class LiftStop extends Command {
    Timer stopTimer;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public LiftStop() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTO
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        stopTimer = new Timer();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.lift);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
        this.setInterruptible(true);

        stopTimer.reset();
        stopTimer.start();

        Robot.lift.setPosition = false;
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
        if(Robot.oi.liftManualHold.get()){
            if(stopTimer.get() < 30 && !Robot.disabledMode && !Robot.lift.liftTalon.getSensorCollection().isRevLimitSwitchClosed()){
                Robot.lift.manualHoldPosition();
            } else {
                Robot.lift.liftStop();
            }
        } else {
        if (stopTimer.get() < 30 && !Robot.oi.limitSwitchOverrideBtn.get() && !Robot.disabledMode ){  //Prevents backdriving on robot
            Robot.lift.holdPosn();
        } else if(stopTimer.get()<30 && Robot.oi.limitSwitchOverrideBtn.get() && !Robot.disabledMode){
            Robot.lift.liftMove(.1);
        } else{
            Robot.lift.liftStop();
        }
    }
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
        Robot.lift.setPosition = false;
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
        Robot.lift.setPosition = false;
    }
}
