// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2992.StarLord2019.commands;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc2992.StarLord2019.Robot;
import  edu.wpi.first.wpilibj.Timer;
/**
 *
 */
public class LiftSetHeight extends Command {

    private double m_Height; //Height in inches
    private double m_Timeout;    

    private boolean isDone = false;
    //private boolean up;

    Timer liftTime;



    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public LiftSetHeight(double height, double timeout) {

        m_Height = height;
        m_Timeout = timeout;

        liftTime = new Timer();
        
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.lift);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
        this.setInterruptible(true);

        //up = (Robot.driveTrain.convertEncoderTicks((int) Math.round(m_Height)) > Robot.lift.liftTalon.getSelectedSensorPosition());

        Robot.lift.goToHeight((int) Math.round(m_Height));
    
        liftTime.reset();
        liftTime.start();
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
        isDone = Math.abs(Robot.driveTrain.convertEncoderTicks((int) Math.round(m_Height)) - Robot.lift.liftTalon.getSelectedSensorPosition()) <= 20;

    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        if(liftTime.get() >= m_Timeout || isDone){
            return true;
        }
        else {
            return false;
        }

    }
    // Called once after isFinished returns true
    @Override
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    }
}
