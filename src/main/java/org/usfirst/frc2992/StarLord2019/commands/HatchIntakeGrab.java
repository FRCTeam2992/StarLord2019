// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2992.StarLord2019.commands;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc2992.StarLord2019.Robot;
import edu.wpi.first.wpilibj.Timer;
import org.usfirst.frc2992.StarLord2019.Constants;

/**
 *
 */
public class HatchIntakeGrab extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    private boolean m_HatchGrab;
    Timer HatchGrabTimer; 
    Timer HatchReleaseTimer;
    private boolean hatchLoadedBool = Robot.hatchIntake.hatchLoadedBool;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public HatchIntakeGrab(boolean HatchGrab) {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        m_HatchGrab = HatchGrab;
        HatchGrabTimer = new Timer();
        HatchReleaseTimer = new Timer();
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.hatchIntake);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
        HatchGrabTimer.reset();
        HatchGrabTimer.start();
        HatchReleaseTimer.reset();
        this.setInterruptible(true);
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
        Robot.hatchIntake.HatchIntakeGrab(m_HatchGrab);

        //This is to automatically grab hatch and retract intake 
        //if we actually have the hatch (look at a timer and if still got it) 
        if(HatchGrabTimer.get() >= Constants.hatchLoadingGrabTimeout && Robot.hatchIntake.hatchLoadingSwitch.get() && !hatchLoadedBool){
            Robot.hatchIntake.HatchIntakeExtend(false);
            hatchLoadedBool = true;
        } else {
            Robot.hatchIntake.HatchIntakeGrab(false);
        }

        //This is to make sure this command won't fight the driver
        // and try to retact and hold the claw thing closed
        if(!m_HatchGrab){
            HatchReleaseTimer.start();
            if(HatchReleaseTimer.get()>2){
                hatchLoadedBool = false;
            }
        }
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return true;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    }
}
