// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2992.StarLord2019.subsystems;

import org.usfirst.frc2992.StarLord2019.Robot;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc2992.StarLord2019.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_VictorSPX;

import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.Timer;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class CargoIntake extends Subsystem {

    public double counter;
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public WPI_VictorSPX cargoPickUpMtr;
    public DigitalInput cargoDistSensor;
    
    Command stopCommand;
    Command stopCommand2;

    private double m_carriageCounter;
    private double m_liftCounter;

    private double m_power = 0;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public CargoIntake() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS    
        cargoPickUpMtr = new WPI_VictorSPX(10);
        addChild("CargoTopMotor", cargoPickUpMtr);
 
        cargoDistSensor = new DigitalInput(0);
        addChild("CargoDistSensor",cargoDistSensor);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        counter = 0;
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop
        if(Robot.oi.OSBtn.get() || Robot.oi.OSJoyBtn.get()){
            stopCommand = new CargoGroundFeedwheel(0);
            stopCommand2 = new CargoIntakeFeedWheel(0);
        } else{
            stopCommand = null;
            stopCommand2 = null;
        }
        if(stopCommand!=null) stopCommand.start();
        if(stopCommand != null)stopCommand2.start();
/*
        if(!Robot.disabledMode && !Robot.isAutoTime && Robot.isCargoMode && cargoDistSensor.get() && !isScoring){
            Robot.cargoLoadLights = true;
            Robot.lightCode.setLightSequence(.325);
            lightScoreCounter = 0;
        } else if(!Robot.disabledMode && !Robot.isAutoTime && Robot.isCargoMode && isScoring && lightScoreCounter < 5){
            Robot.cargoScoreLights = true;
            Robot.lightCode.setLightSequence(.375);
            lightScoreCounter++;
        } else if(!Robot.disabledMode && !Robot.isAutoTime && !Robot.VPLights && Robot.isCargoMode){
            Robot.lightCode.setLightSequence(.075);
            Robot.cargoLoadLights = false;
            Robot.cargoScoreLights = false;
            lightScoreCounter = 0;
        } else{
            Robot.cargoLoadLights = false;
            Robot.cargoScoreLights = false;
            lightScoreCounter = 0;
        }
*/
        if(!Robot.disabledMode && !Robot.isAutoTime && Robot.isCargoMode && !Robot.VPLights){
            Robot.lightCode.setLightSequence(.075);
        }


        if(cargoDistSensor.get() && m_power>0){
            if(m_carriageCounter>=5){//
                cargoPickUpMtr.set(0);
               //m_power = 0;//
                m_carriageCounter = 0;//
            } else{//
                m_carriageCounter++;//
            }//
        }
/*
        if(Robot.lift.moving){
            if(m_liftCounter>=5){
                cargoPickUpMtr.set(0);
            }else{
                cargoPickUpMtr.set(.4);
                m_liftCounter++;
            }
        }
*/
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void CargoIntakeFeedWheel(double Power){        
        //makes sure the motor run longer so cargo is in all the way
        m_power = Power;
        
        if (cargoDistSensor.get() && Power>0){ //if get sensor increment counter
            counter++;
        }else {// otherwise reset counters
            counter = 0;
            m_carriageCounter = 0;
        }
        
        if (counter >= 5 && Power>0){//sets power to 0 when counter exceeds number
            cargoPickUpMtr.set(0);
            
        }else {//otherwise sets power 
            cargoPickUpMtr.set(Power);
        }
        

    }

    public boolean getDistSensor(){
        return cargoDistSensor.get();
    }

}